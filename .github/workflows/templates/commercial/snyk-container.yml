name: Snyk Container Analysis

on:
  workflow_call:
    inputs:
      image_name:
        required: true
        type: string
        description: "Container image to scan (e.g., 'myapp:latest')"
      registry_username:
        required: false
        type: string
        description: "Username for private registry"
        default: ""
      registry_password:
        required: false
        type: string
        description: "Password for private registry"
        default: ""
      severity_threshold:
        required: false
        type: string
        description: "Minimum severity level to report (low, medium, high, critical)"
        default: "high"
      fail_on_issues:
        required: false
        type: boolean
        description: "Whether to fail the workflow if issues are found"
        default: true
      sarif_output:
        required: false
        type: boolean
        description: "Whether to output results as SARIF"
        default: true
    secrets:
      snyk_token:
        required: true
        description: "Snyk API token"

jobs:
  snyk-container:
    name: Snyk Container
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker
        uses: docker/setup-buildx-action@v2

      - name: Log in to registry
        if: inputs.registry_username != '' && inputs.registry_password != ''
        uses: docker/login-action@v2
        with:
          registry: ${{ contains(inputs.image_name, '.') && inputs.image_name | split('/')[0] || 'docker.io' }}
          username: ${{ inputs.registry_username }}
          password: ${{ inputs.registry_password }}

      - name: Setup Snyk CLI
        uses: snyk/actions/setup@master

      - name: Snyk Auth
        run: snyk auth ${{ secrets.snyk_token }}
      
      - name: Run Snyk Container scan
        run: |
          ARGS="--severity-threshold=${{ inputs.severity_threshold }}"
          
          ${{ inputs.fail_on_issues && 'ARGS="$ARGS --fail-on=all"' || 'ARGS="$ARGS --fail-on=upgradable"' }}
          ${{ inputs.sarif_output && 'ARGS="$ARGS --sarif-file-output=snyk-container-results.sarif"' || '' }}
          
          snyk container test ${{ inputs.image_name }} $ARGS
        continue-on-error: ${{ !inputs.fail_on_issues }}

      - name: Upload Snyk Container Report to GitHub Code Scanning
        if: inputs.sarif_output
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: snyk-container-results.sarif
          category: "snyk-container"